// Code generated by handler_generator. DO NOT EDIT.

package eventsub

import (
	"encoding/json"
	"net/http"

	"github.com/dnsge/twitch-eventsub-framework/v2/bindings"
)

func deserializeAndCallHandler[EventType any](
	h *bindings.NotificationHeaders,
	event json.RawMessage,
	handler EventHandler[EventType],
) error {
	if handler == nil {
		return nil
	}

	var data EventType
	if err := json.Unmarshal(event, &data); err != nil {
		return err
	}

	go handler(h, &data)
	return nil
}

func (s *SubHandler) handleNotification(w http.ResponseWriter, bodyBytes []byte, h *bindings.NotificationHeaders) {
	var notification bindings.EventNotification
	if err := json.Unmarshal(bodyBytes, &notification); err != nil {
		http.Error(w, "Invalid JSON body", http.StatusBadRequest)
		return
	}

	var err error
	selector := h.SubscriptionType + "_" + h.SubscriptionVersion
	switch selector {
	case "channel.ban_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelBan)

	case "channel.channel_points_custom_reward.add_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPointsRewardAdd)

	case "channel.channel_points_custom_reward.remove_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPointsRewardRemove)

	case "channel.channel_points_custom_reward.update_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPointsRewardUpdate)

	case "channel.channel_points_custom_reward_redemption.add_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPointsRewardRedemptionAdd)

	case "channel.channel_points_custom_reward_redemption.update_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPointsRewardRedemptionUpdate)

	case "channel.chat.clear_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelChatClear)

	case "channel.chat.clear_user_messages_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelChatClearUserMessages)

	case "channel.chat.message_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelChatMessage)

	case "channel.chat.message_delete_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelChatMessageDelete)

	case "channel.chat.notification_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelChatNotification)

	case "channel.cheer_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelCheer)

	case "channel.follow_2":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelFollow)

	case "channel.goal.begin_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleGoalBegin)

	case "channel.goal.end_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleGoalEnd)

	case "channel.goal.progress_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleGoalProgress)

	case "channel.hype_train.begin_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleHypeTrainBegin)

	case "channel.hype_train.end_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleHypeTrainEnd)

	case "channel.hype_train.progress_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleHypeTrainProgress)

	case "channel.moderator.add_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelModeratorAdd)

	case "channel.moderator.remove_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelModeratorRemove)

	case "channel.poll.begin_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPollBegin)

	case "channel.poll.end_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPollEnd)

	case "channel.poll.progress_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPollProgress)

	case "channel.prediction.begin_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPredictionBegin)

	case "channel.prediction.end_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPredictionEnd)

	case "channel.prediction.lock_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPredictionLock)

	case "channel.prediction.progress_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelPredictionProgress)

	case "channel.raid_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelRaid)

	case "channel.subscribe_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelSubscribe)

	case "channel.subscription.end_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelSubscriptionEnd)

	case "channel.subscription.gift_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelSubscriptionGift)

	case "channel.subscription.message_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelSubscriptionMessage)

	case "channel.unban_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelUnban)

	case "channel.unban_request.create_beta":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelUnbanRequestCreate)

	case "channel.unban_request.resolve_beta":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelUnbanRequestResolve)

	case "channel.update_2":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleChannelUpdate)

	case "drop.entitlement.grant_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleDropEntitlementGrant)

	case "extension.bits_transaction.create_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleExtensionBitsTransactionCreate)

	case "stream.offline_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleStreamOffline)

	case "stream.online_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleStreamOnline)

	case "user.authorization.grant_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleUserAuthorizationGrant)

	case "user.authorization.revoke_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleUserAuthorizationRevoke)

	case "user.update_1":
		err = deserializeAndCallHandler(h, notification.Event, s.HandleUserUpdate)

	default:
		http.Error(w, "Unsupported notification type and version", http.StatusBadRequest)
		return
	}

	if err != nil {
		http.Error(w, "Invalid notification", http.StatusBadRequest)
		return
	}

	writeEmptyOK(w)
}
